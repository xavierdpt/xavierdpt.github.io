package trove.pages;

import trove.Languages;
import trove.Page;
import trove.RenderContext;

import java.io.IOException;
import java.util.List;

public class SOAP12Part2 extends Page {
    public SOAP12Part2() {
        super("SOAP/SOAP12-part2", "SOAP 1.2 - Part 2", List.of(Languages.XML));
    }

    @Override
    protected void render(RenderContext renderContext) throws IOException {
        p(externalLink("https://www.w3.org/TR/soap12-part2/", "SOAP Version 1.2 Part 2: Adjuncts (Second Edition)"));
        section("1");
        p("SOAP Data Model");
        p("SOAP Encoding");
        p("SOAP RPC Representation");
        p("SOAP-Supplied Message Exchange Patterns");
        p("SOAP Web Method");
        p("SOAP HTTP Binding");
        section("1.1");
        p("Common prefixes for namespaces:");
        p("`env` : `\"http://www.w3.org/2003/05/soap-envelope\"` ; defined in SOAP Version 1.2 Part 1");
        p("`enc` : `\"http://www.w3.org/2003/05/soap-encoding\"` ; schema available at " + externalLink("http://www.w3.org/2003/05/soap-encoding"));
        p("`rpc` : `\"http://www.w3.org/2003/05/soap-rpc\"` ; schema available at " + externalLink("http://www.w3.org/2003/05/soap-rpc"));
        p("`xs` : `\"http://www.w3.org/2001/XMLSchema\"` ; defined in the XML Schema specification");
        p("`xsi` : `\"http://www.w3.org/2001/XMLSchema-instance\"` ; defined in the XML Schema specification");
        section("2");
        p("SOAP Data Model");
        p("Directed edge-labeled graph of nodes");
        p("Use of the SOAP Data Model + SOAP Encoding + SOAP RPC Representation is optional");
        section("2.1");
        p("An edge originates at a graph node and terminates at a graph node.");
        p("A graph node has outbound edges and inbound edges.");
        p("An edge may originate and terminate at the same graph node.");
        p("An edge may have only an originating node or only a terminating node.");
        section("2.1.1");
        p("Edge labels are XML qualified names.");
        section("2.2");
        p("A graph node as zero or more outbound edges.");
        p("A graph node with no outbound edges has an optional lexical value.");
        p("All graph node have an optional type name of `xs:QName`");
        section("2.2.1");
        p("A single reference node has a single inbound edge.");
        p("A multi reference node has multiple inbound edges.");
        section("2.3");
        p("A simple value is a graph node with a lexical value.");
        p("A compound value is a graph node with one or more outbound edges.");
        p("A struct is a graph node whose outbound edges are distinguished by label.");
        p("An array is a graph node whose outbound edges are distinguished by position.");
        p("The outbound edges of an array value must not be labeled.");
        section("3");
        p("The SOAP encoding of the SOAP Data Model is identified by the URI `\"http://www.w3.org/2003/05/soap-encoding\"`");
        p("SOAP messages should indicate the encoding using the `env:encodingStyle` attribute");
        section("3.1");
        section("3.1.1");
        p("Graph edges are encoded as XML elements.");
        p("An element that does not have a `ref` attribute represents a node  and, at the same time,  the edge that terminates at that node.");
        p("If an element has a `ref` attribute, it's value must be the value of the `id` attribute of another element in the same envelope that is in the scope of a SOAP encoding.");
        p("All graph nodes are represented without a `ref` attribute.");
        p("Additional inbound edges for multi reference nodes are represented with a `ref` attribute.");
        section("3.1.2");
        p("Simple values are represented as sequence of characters");
        p("The XML element may also have a `nodeType` attribute.");
        section("3.1.3");
        p("Outbound edges are encoded as child XML elements.");
        p("For a graph node distinguished by a label, the local name and namespace name of the XML element is the value of the edge label.");
        p("For a graph node distinguished by position, the local name and namespace name are not significant.");
        p("The XML element for a compound value may have a `nodeType` attribute.");
        p("For arrays, the XML element may have an `itemType` attribute and an `arraySize` attribute.");
        p("Graph edges that do not terminate in a graph node may be omitted or may be represented as an XML element which has `xsi:nil` attribute set to `\"true\"`");
        section("3.1.4");
        p("The type name property of a graph node is a pair of a namespace name and a local name.");
        p("If an XML element has the `xsi:type` attribute, then it's type name is the value of that type.");
        p("Otherwise, the type name property is the value of the `enc:itemType` attribute of the parenet element, if present.");
        p("Otherwise, the item type is unspecified.");
        section("3.1.4.1");
        p("`enc:itemType` attribute of type `xs:QName`");
        section("3.1.5");
        section("3.1.5.1");
        p("`enc:id` of type `xs:ID`");
        section("3.1.5.2");
        p("`enc:ref` attribute of type `xs:IDREF`");
        section("3.1.5.3");
        p("`enc:id` and `enc:ref` must not appear on the same XML element");
        section("3.1.6");
        p("`enc:arraySize` of type `enc:arraySize`");
        p("The `arraySize` attribute can describe the sizes of multidimensional arrays.");
        p("The default value is '`*`'");
        section("3.1.7");
        p("`enc:nodeType` attribute of type `enc:nodeType`");
        p("Must be \"`simple`\", \"`struct`\" or \"`array`\"");
        section("3.2");
        p("`ref` attribute but no corresponding `id` found => fault `env:Sender` with subcode `enc:MissingID`");
        p("same `id` used more than once => fault `env:Sender` with subcode `enc:DuplicateID`");
        p("missing type name => fault `env:Sender` with subcode `enc:UntypedValue`");
        section("4");
        p("The SOAP RPC representation must support the SOAP data model but does not need to use the SOAP encoding.");
        p("Address of target SOAP node");
        p("Procedure or method name");
        p("Arguments");
        p("Values for properties required by the bindings");
        p("Optional header data");
        section("4.1");
        section("4.1.1");
        p("Resources to be updated should be identified with URIs");
        section("4.1.2");
        p("The Web Method feature with Response MEP can be used for resource retrieval, with `http://www.w3.org/2003/05/soap/features/web-method/Method` set to `GET`.");
        p("The Web Method feature with Request-Response MEP can be used for other cases, with `http://www.w3.org/2003/05/soap/features/web-method/Method` set to `POST`.");
        section("4.2");
        section("4.2.1");
        p("RPC invocation: a struct whose name corresponds to the name of the method, with an outbound edge for each `in` or `in/out` parameter, where each edge is labeled with the name of the parameter.");
        section("4.2.2");
        p("RPC response: a struct with an outbound edge for the return value and each `out` or `in/out` parameter.");
        p("The edges are labeled with the name of the parameters.");
        p("The return value is labeled with `\"rpc:result\"`, which terminates in a `xs:QName` node whose value is the name of the outbound edge which has the actual return value.");
        section("4.2.3");
        p("When using SOAP Encoding, the Body must have exactly one child item.");
        section("4.3");
        p("Additional information must be expressed as SOAP header blocks.");
        section("4.4");
        p("RPC faults");
        p("`env:Receiver`");
        p("`env:DataEncodingUnknown`");
        p("`env:Sender rpc:ProcedureNotPresent`");
        p("`env:Sender rpc:BadArguments`");
        p("Values for `Reason` and `Detail` are implementation-defined.");
        section("5");
        section("5.1");
        section("5.1.1");
        p("Properties are named with URIs, and should be associated to an XML Schema type.");
        section("5.1.2");
        section("5.1.2.1");
        p("Message Exchange Context");
        section("5.1.2.2");
        p("Environment Context");
        section("5.1.3");
        p("One or more properties can enable one or more features.");
        section("6");
        section("6.1");
        p("Four `xs:anyURI` properties in `\"http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/\"`");
        p("`ExchangePatternName`, `FailureReason`, `Role`, `State`");
        section("6.2");
        p("Request-Response MEP");
        section("6.2.1");
        p("SOAP feature name: `\"http://www.w3.org/2003/05/soap/mep/request-response/\"`");
        section("6.2.2");
        p("Message acting as a request followed by message acting as a response.");
        p("Response may contain a SOAP envelope or must be a binding-specific message.");
        section("6.2.3");
        p("Properties for Request-Response MEP in `\"http://www.w3.org/2003/05/soap/mep/\"`");
        p("`OutboundMessage`, `InboundMessage`, `ImmediateDestination` and `ImmediateSender`");
        sep();
        p("Initial message exchange context for a requesting SOAP node:");
        sep();
        p("`\"http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName\"`");
        p("`\"http://www.w3.org/2003/05/soap/mep/request-response/\"`");
        sep();
        p("`\"http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason\"`");
        p("`\"None\"`");
        sep();
        p("`\"http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role\"`");
        p("`\"RequestingSOAPNode\"`");
        sep();
        p("`\"\"`");
        p("`\"Init\"`");
        sep();
        p("`\"http://www.w3.org/2003/05/soap/mep/OutboundMessage\"`");
        sep();
        p("`\"http://www.w3.org/2003/05/soap/mep/ImmediateDestination\"`");
        sep();
        p("Initial message exchange context for a responding SOAP node");
        p("ExchangePatternName: `\"http://www.w3.org/2003/05/soap/mep/request-response/\"`");
        p("FailureReason: None");
        p("Role: RespondingSOAPNode");
        p("State: Init");
        sep();
        p("Requesting SOAP node state transitions: `Init` -> `Requesting` -> `Sending+Receiving`");
        p("Responding SOAP node state transitions: `Init` -> `Receiving` -> `Receiving+Sending`");
        p("If using streaming, the node sending the request may need to start processing the response in parallel.");
        section("6.2.4");
        p("SOAP faults generated at the responding node while in `Responding` state are made available in the `OutboundMessage` property.");
        section("6.3");
        p("SOAP Response MEP");
        section("6.3.1");
        p("Feature name: `\"http://www.w3.org/2003/05/soap/mep/soap-response/\" `");
        section("6.3.2");
        p("Request transmitted in a binding-specific manner.");
        p("Response which contains a SOAP envelope.");
        section("6.3.3");
        p("`http://www.w3.org/2003/05/soap/mep/OutboundMessage`");
        p("Properties: `OutboundMessage`, `InboundMessage`, `ImmediateDestination`, `ImmediateSender`");
        sep();
        p("Initiation of the message exchange context for the requesting node:");
        p("`ExchangePatternName`: `\"http://www.w3.org/2003/05/soap/mep/soap-response/\" `");
        p("`FailureReason`: `\"None\"`");
        p("`Role`: `\"RequestingSOAPNode\"`");
        p("`State`: `\"Init\"`");
        p("`OutboundMessage`");
        p("`ImmediateDestination`");
        sep();
        p("Initiation of a message exchange context for an inbound request message:");
        p("ExchangePatternName: `\"http://www.w3.org/2003/05/soap/mep/soap-response/\"`");
        p("FailureReason: `\"None\"`");
        p("Role: `\"RespondingSOAPNode\"`");
        p("State: `\"Init\"`");
        sep();
        p("Requesting SOAP Node State Transitions: `Init` -> `Requesting` -> `Receiving`");
        p("Responding SOAP Node State Transitions: `Init` -> `Receiving` -> `Sending`");
        section("6.3.4");
        p("Faults generated by the responding SOAP node while in the `Receiving` state are made available in the `OutboundMessage` property.");
        section("6.4");
        p("SOAP Web Method Feature");
        section("6.4.1");
        p("Feature name: `\"http://www.w3.org/2003/05/soap/features/web-method/\"`");
        section("6.4.2");
        section("6.4.3");
        p("Property name: `http://www.w3.org/2003/05/soap/features/web-method/Method`");
        p("Possible values: `\"GET\"`, `\"POST\"`, `\"PUT\"`, `\"DELETE\"`, ...");
        section("6.5");
        p("SOAP Action Feature");
        section("6.5.1");
        p("Feature name: `\"http://www.w3.org/2003/05/soap/features/action/\"`");
        section("6.5.2");
        p("The `\"application/soap+xml\"` media type supports an `action` parameter.");
        section("6.5.3");
        p("Property: `http://www.w3.org/2003/05/soap/features/action/Action `");
        p("Property type: `xsd:anyURI`");
        p("The sender must use the value of that property as the `action` parameter of the media type, and the receiving node must make the value of that parameter available in the property on the other end.");
        section("7");
        section("7.1");
        section("7.1.1");
        section("7.1.2");
        p("The base URI is the value of the `Request-URI` or the `Content-Location` header field.");
        section("7.1.3");
        section("7.1.4");
        p("`application/soap+xml`");
        p("Application may advertsise and use other media types.");
        section("7.2");
        p("Binding name: `\"http://www.w3.org/2003/05/soap/bindings/HTTP/\"`");
        section("7.3");
        p("Supported MEPs:");
        p("`\"http://www.w3.org/2003/05/soap/mep/request-response/\"`");
        p("`\"http://www.w3.org/2003/05/soap/mep/soap-response/\" `");
        section("7.4");
        p("Supported features:");
        p("`\"http://www.w3.org/2003/05/soap/features/web-method/\" `");
        p("`\"http://www.w3.org/2003/05/soap/features/action/\"`");
        p("`POST` => `ExchangePatternName` = \"http://www.w3.org/2003/05/soap/mep/request-response/\"");
        p("`GET` => `ExchangePatternName` = \"http://www.w3.org/2003/05/soap/mep/soap-response/\"");
        p("``");
        section("7.5");
        section("7.5.1");
        section("7.5.1.1");
        section("7.5.1.2");
        section("7.5.1.3");
        section("7.5.1.4");
        section("7.5.1.5");
        section("7.5.2");
        section("7.5.2.1");
        section("7.5.2.2");
        section("7.5.2.3");
        section("7.5.2.4");
        section("7.5.2.5");
        section("7.6");
        section("8");
        section("8.1");
        section("8.2");
        section("A");
        section("B");
        section("B.1");
        section("B.2");
        section("C");
        section("C.1");
        section("C.2");
        section("C.3");
        section("D");
    }
}
