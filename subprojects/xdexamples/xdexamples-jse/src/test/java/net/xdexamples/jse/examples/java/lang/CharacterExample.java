package net.xdexamples.jse.examples.java.lang;

import net.xdexamples.ExampleUtils;
import net.xdexamples.support.internal.Scaffolded;

import java.lang.constant.DynamicConstantDesc;
import java.util.Optional;

@Scaffolded
public class CharacterExample {

    public void scaffold() throws Exception {
        if (ExampleUtils.skip()) {
            Character instance = ExampleUtils.makeInstance(Character.class);
            Optional<DynamicConstantDesc<Character>> characterDynamicConstantDesc = instance.describeConstable();
            char ch = 0;
            Character character = Character.valueOf(ch);
            char c = instance.charValue();
            int i = instance.hashCode();
            int i1 = Character.hashCode(ch);

            Character other = null;
            boolean equals = instance.equals(other);
            String s = instance.toString();
            String s1 = Character.toString(ch);
            int codePoint = 0;
            String s2 = Character.toString(codePoint);
            boolean validCodePoint = Character.isValidCodePoint(codePoint);
            boolean bmpCodePoint = Character.isBmpCodePoint(codePoint);
            boolean supplementaryCodePoint = Character.isSupplementaryCodePoint(codePoint);
            boolean highSurrogate = Character.isHighSurrogate(ch);
            boolean lowSurrogate = Character.isLowSurrogate(ch);
            boolean surrogate = Character.isSurrogate(ch);
            boolean surrogatePair = Character.isSurrogatePair(ch, ch);
            int i2 = Character.charCount(codePoint);
            int i3 = Character.toCodePoint(ch, ch);

            CharSequence charSequence = null;
            int index = 0;
            int i4 = Character.codePointAt(charSequence, index);
            char[] chars = new char[0];
            int i5 = Character.codePointAt(chars, index);
            int limit = 0;
            int i6 = Character.codePointAt(chars, index, limit);
            int i7 = Character.codePointBefore(charSequence, index);
            int i8 = Character.codePointBefore(chars, index);
            int start = 0;
            int i9 = Character.codePointBefore(chars, index, start);
            char c1 = Character.highSurrogate(codePoint);
            char c2 = Character.lowSurrogate(codePoint);
            char[] chars1 = Character.toChars(codePoint);
            int i10 = Character.toChars(codePoint, chars, index);
            int beginIndex = 0;
            int endIndex = 0;
            int i11 = Character.codePointCount(charSequence, beginIndex, endIndex);
            int offset = 0;
            int count = 0;
            int i12 = Character.codePointCount(chars, offset, count);
            int i13 = Character.offsetByCodePoints(charSequence, index, offset);
            int i14 = Character.offsetByCodePoints(chars, start, count, index, offset);
            boolean lowerCase = Character.isLowerCase(ch);
            boolean lowerCase1 = Character.isLowerCase(codePoint);
            boolean upperCase = Character.isUpperCase(ch);
            boolean upperCase1 = Character.isUpperCase(codePoint);
            boolean titleCase = Character.isTitleCase(ch);
            boolean titleCase1 = Character.isTitleCase(codePoint);
            boolean digit = Character.isDigit(ch);
            boolean digit1 = Character.isDigit(codePoint);
            boolean defined = Character.isDefined(ch);
            boolean defined1 = Character.isDefined(codePoint);
            boolean letter = Character.isLetter(ch);
            boolean letter1 = Character.isLetter(codePoint);
            boolean letterOrDigit = Character.isLetterOrDigit(ch);
            boolean letterOrDigit1 = Character.isLetterOrDigit(codePoint);
            boolean alphabetic = Character.isAlphabetic(codePoint);
            boolean ideographic = Character.isIdeographic(codePoint);
            boolean javaIdentifierStart = Character.isJavaIdentifierStart(ch);
            boolean javaIdentifierStart1 = Character.isJavaIdentifierStart(codePoint);
            boolean javaIdentifierPart = Character.isJavaIdentifierPart(ch);
            boolean javaIdentifierPart1 = Character.isJavaIdentifierPart(codePoint);
            boolean unicodeIdentifierStart = Character.isUnicodeIdentifierStart(ch);
            boolean unicodeIdentifierStart1 = Character.isUnicodeIdentifierStart(codePoint);
            boolean unicodeIdentifierPart = Character.isUnicodeIdentifierPart(ch);
            boolean unicodeIdentifierPart1 = Character.isUnicodeIdentifierPart(codePoint);
            boolean identifierIgnorable = Character.isIdentifierIgnorable(ch);
            boolean identifierIgnorable1 = Character.isIdentifierIgnorable(codePoint);
            char c3 = Character.toLowerCase(ch);
            int i15 = Character.toLowerCase(codePoint);
            char c4 = Character.toUpperCase(ch);
            int i16 = Character.toUpperCase(codePoint);
            char c5 = Character.toTitleCase(ch);
            int i17 = Character.toTitleCase(codePoint);
            int radix = 0;
            int digit2 = Character.digit(ch, radix);
            int digit3 = Character.digit(codePoint, radix);
            int numericValue = Character.getNumericValue(ch);
            int numericValue1 = Character.getNumericValue(codePoint);
            boolean spaceChar = Character.isSpaceChar(ch);
            boolean spaceChar1 = Character.isSpaceChar(codePoint);
            boolean whitespace = Character.isWhitespace(ch);
            boolean whitespace1 = Character.isWhitespace(codePoint);
            boolean isoControl = Character.isISOControl(ch);
            boolean isoControl1 = Character.isISOControl(codePoint);
            int type = Character.getType(ch);
            int type1 = Character.getType(codePoint);
            int digitt = 0;
            char c6 = Character.forDigit(digitt, radix);
            byte directionality = Character.getDirectionality(ch);
            byte directionality1 = Character.getDirectionality(codePoint);
            boolean mirrored = Character.isMirrored(ch);
            boolean mirrored1 = Character.isMirrored(codePoint);
            int i18 = instance.compareTo(other);
            char chx = 0;
            char chy = 0;
            int compare = Character.compare(chx, chy);
            char c7 = Character.reverseBytes(ch);
            String name = Character.getName(codePoint);
            int i19 = Character.codePointOf(name);

            int minRadix = Character.MIN_RADIX;
            int maxRadix = Character.MAX_RADIX;
            char minValue = Character.MIN_VALUE;
            char maxValue = Character.MAX_VALUE;
            Class<Character> type2 = Character.TYPE;
            byte unassigned = Character.UNASSIGNED;
            byte uppercaseLetter = Character.UPPERCASE_LETTER;
            byte lowercaseLetter = Character.LOWERCASE_LETTER;
            byte titlecaseLetter = Character.TITLECASE_LETTER;
            byte modifierLetter = Character.MODIFIER_LETTER;
            byte otherLetter = Character.OTHER_LETTER;
            byte nonSpacingMark = Character.NON_SPACING_MARK;
            byte enclosingMark = Character.ENCLOSING_MARK;
            byte combiningSpacingMark = Character.COMBINING_SPACING_MARK;
            byte decimalDigitNumber = Character.DECIMAL_DIGIT_NUMBER;
            byte letterNumber = Character.LETTER_NUMBER;
            byte otherNumber = Character.OTHER_NUMBER;
            byte spaceSeparator = Character.SPACE_SEPARATOR;
            byte lineSeparator = Character.LINE_SEPARATOR;
            byte paragraphSeparator = Character.PARAGRAPH_SEPARATOR;
            byte control = Character.CONTROL;
            byte format = Character.FORMAT;
            byte privateUse = Character.PRIVATE_USE;
            byte surrogate1 = Character.SURROGATE;
            byte dashPunctuation = Character.DASH_PUNCTUATION;
            byte startPunctuation = Character.START_PUNCTUATION;
            byte endPunctuation = Character.END_PUNCTUATION;
            byte connectorPunctuation = Character.CONNECTOR_PUNCTUATION;
            byte otherPunctuation = Character.OTHER_PUNCTUATION;
            byte mathSymbol = Character.MATH_SYMBOL;
            byte currencySymbol = Character.CURRENCY_SYMBOL;
            byte modifierSymbol = Character.MODIFIER_SYMBOL;
            byte otherSymbol = Character.OTHER_SYMBOL;
            byte initialQuotePunctuation = Character.INITIAL_QUOTE_PUNCTUATION;
            byte finalQuotePunctuation = Character.FINAL_QUOTE_PUNCTUATION;
            byte directionalityUndefined = Character.DIRECTIONALITY_UNDEFINED;
            byte directionalityLeftToRight = Character.DIRECTIONALITY_LEFT_TO_RIGHT;
            byte directionalityRightToLeft = Character.DIRECTIONALITY_RIGHT_TO_LEFT;
            byte directionalityRightToLeftArabic = Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
            byte directionalityEuropeanNumber = Character.DIRECTIONALITY_EUROPEAN_NUMBER;
            byte directionalityEuropeanNumberSeparator = Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
            byte directionalityEuropeanNumberTerminator = Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
            byte directionalityArabicNumber = Character.DIRECTIONALITY_ARABIC_NUMBER;
            byte directionalityCommonNumberSeparator = Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
            byte directionalityNonspacingMark = Character.DIRECTIONALITY_NONSPACING_MARK;
            byte directionalityBoundaryNeutral = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
            byte directionalityParagraphSeparator = Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR;
            byte directionalitySegmentSeparator = Character.DIRECTIONALITY_SEGMENT_SEPARATOR;
            byte directionalityWhitespace = Character.DIRECTIONALITY_WHITESPACE;
            byte directionalityOtherNeutrals = Character.DIRECTIONALITY_OTHER_NEUTRALS;
            byte directionalityLeftToRightEmbedding = Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
            byte directionalityLeftToRightOverride = Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
            byte directionalityRightToLeftEmbedding = Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
            byte directionalityRightToLeftOverride = Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
            byte directionalityPopDirectionalFormat = Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
            byte directionalityLeftToRightIsolate = Character.DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE;
            byte directionalityRightToLeftIsolate = Character.DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE;
            byte directionalityFirstStrongIsolate = Character.DIRECTIONALITY_FIRST_STRONG_ISOLATE;
            byte directionalityPopDirectionalIsolate = Character.DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE;
            char minHighSurrogate = Character.MIN_HIGH_SURROGATE;
            char maxHighSurrogate = Character.MAX_HIGH_SURROGATE;
            char minLowSurrogate = Character.MIN_LOW_SURROGATE;
            char maxLowSurrogate = Character.MAX_LOW_SURROGATE;
            char minSurrogate = Character.MIN_SURROGATE;
            char maxSurrogate = Character.MAX_SURROGATE;
            int minSupplementaryCodePoint = Character.MIN_SUPPLEMENTARY_CODE_POINT;
            int minCodePoint = Character.MIN_CODE_POINT;
            int maxCodePoint = Character.MAX_CODE_POINT;
            int size = Character.SIZE;
            int bytes = Character.BYTES;
        }
    }

}
