{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WIDTH","HEIGHT","directions","MAX_INSTRUCTION_COUNT","initializeProgram","Array","from","length","WHITE","undefined","BLACK","initializeProgramState","instruction","count","x","Math","floor","y","grid","program","programState","possibleActions","direction","color","push","previousGrids","previousGridsColors","split","map","d","context","App","props","start","setState","intervalHandle","setInterval","steps","stop","nextFn","state","clearInterval","nsteps","changedCells","stopped","i","stepResult","step","cell","k","colorToWrite","fillStyle","fillRect","setTimeout","nextProgram","currentColor","action","actionIndex","random","createAction","nextX","nextY","nextInstruction","previousGrid","gridScore","score","computeScore","better","console","log","JSON","stringify","splice","unshift","group","hexdigits","gidx","groupEnd","gridIdx","canvas","document","querySelector","getContext","this","className","id","width","height","disabled","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ba838440.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst RANDOM = true;\nconst WIDTH = 601;\nconst HEIGHT = 601;\nconst CELL_SIZE = 1;\n\nconst directions = [\n  [-1, 0], // right\n  [0, 1], // down\n  [-1, 0], // left\n  [0, -1], // up\n];\n\nconst BLANK = 0;\nconst WHITE = 1;\nconst BLACK = 2;\n\nconst RIGHT = 0;\nconst DOWN = 1;\nconst LEFT = 2;\nconst UP = 3;\n\nconst INSTRUCTIONS = 100;\nconst MAX_INSTRUCTION_COUNT = 100000;\nconst PAUSE = 1;\n\nconst initializeProgram = () =>\n  Array.from({ length: INSTRUCTIONS }, () => ({\n    WHITE: undefined,\n    BLACK: undefined,\n  }));\n\nconst initializeProgramState = () => ({\n  instruction: 0,\n  count: 0,\n  x: Math.floor(WIDTH / 2) + 1,\n  y: Math.floor(HEIGHT / 2) + 1,\n  grid: Array.from({ length: WIDTH }, () =>\n    Array.from({ length: HEIGHT }, () => BLANK)\n  ),\n});\n\nlet program = initializeProgram();\nlet programState = initializeProgramState();\n\nconst possibleActions = [];\nfor (const direction of [RIGHT, DOWN, LEFT, UP]) {\n  for (const color of [BLACK, WHITE]) {\n    for (let instruction = 0; instruction < INSTRUCTIONS; ++instruction) {\n      possibleActions.push({ direction, color, instruction });\n    }\n  }\n}\nconst actionChoices = [];\nlet currentActionChoice = null;\nconst previousGrids = [];\nconst previousGridsColors = \"123456789ABCDEF\"\n  .split(\"\")\n  .map((d) => `#${d}${d}${d}${d}${d}${d}`);\nlet context = null;\n\n// This creates an action, reusing the choices done by the previous program\nconst createAction = () => {\n  if (RANDOM) {\n    const actionIndex = Math.floor(Math.random() * possibleActions.length);\n    const action = possibleActions[actionIndex];\n    return action;\n  }\n  // TODO: handle boundary when everything is maxxed\n  if (currentActionChoice === null) {\n    currentActionChoice = 0;\n  }\n  if (actionChoices[currentActionChoice] === undefined) {\n    actionChoices.push(0);\n  } else {\n    // we increment this action choice only in all the next action choices are maxxed\n    let maxxed = true;\n    for (let i = currentActionChoice + 1; i < actionChoices.length; ++i) {\n      if (actionChoices[i] !== possibleActions.length - 1) {\n        maxxed = false;\n      }\n    }\n    if (maxxed) {\n      ++actionChoices[currentActionChoice];\n      actionChoices.splice(currentActionChoice + 1);\n    }\n  }\n  const action = possibleActions[actionChoices[currentActionChoice]];\n  ++currentActionChoice;\n  return action;\n};\n\nconst computeScore = (grid, count) => {\n  let score = 0;\n  for (let x = 0; x < WIDTH; ++x) {\n    for (let y = 0; y < HEIGHT; ++y) {\n      if (grid[x][y] !== 0) {\n        ++score;\n      }\n    }\n  }\n  score += 1 - count / MAX_INSTRUCTION_COUNT;\n  return score;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { intervalHandle: null };\n  }\n  start = () => {\n    this.setState({ intervalHandle: setInterval(() => this.steps(1000), 1) });\n  };\n  stop = (nextFn) => {\n    const { intervalHandle } = this.state;\n    clearInterval(intervalHandle);\n    this.setState({ intervalHandle: null }, nextFn);\n  };\n  steps = (nsteps) => {\n    let changedCells = {};\n    let stopped = false;\n    for (let i = 0; i < nsteps; ++i) {\n      const stepResult = this.step();\n      if (stepResult.cell) {\n        changedCells[`${stepResult.cell.x}-${stepResult.cell.y}`] =\n          stepResult.cell;\n      }\n      if (stepResult.stopped) {\n        stopped = true;\n        break;\n      }\n    }\n    for (const k in changedCells) {\n      const x = changedCells[k].x;\n      const y = changedCells[k].y;\n      const colorToWrite = changedCells[k].colorToWrite;\n      context.fillStyle = colorToWrite === BLACK ? \"black\" : \"white\";\n      context.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n    }\n    if (stopped) {\n      this.stop(() => {\n        setTimeout(() => {\n          this.nextProgram();\n          this.start();\n        }, PAUSE);\n      });\n    }\n  };\n  step = () => {\n    const { instruction, x, y, grid } = programState;\n    let currentColor = grid[x][y];\n    if (currentColor === BLANK) {\n      currentColor = WHITE;\n    }\n    let action = program[instruction][currentColor];\n    if (action === undefined) {\n      action = createAction();\n      program[instruction][currentColor] = action;\n    }\n    const nextX = x + directions[action.direction][0];\n    const nextY = y + directions[action.direction][1];\n    if (\n      nextX < 0 ||\n      nextX >= WIDTH ||\n      nextY < 0 ||\n      nextY >= HEIGHT ||\n      programState.count > MAX_INSTRUCTION_COUNT\n    ) {\n      return { stopped: true, cell: null };\n    }\n    const nextInstruction = action.instruction;\n    const colorToWrite = action.color;\n    grid[x][y] = action.color;\n    programState.x = nextX;\n    programState.y = nextY;\n    programState.instruction = nextInstruction;\n    ++programState.count;\n    return { cell: { x, y, colorToWrite }, stopped: false };\n  };\n  nextProgram = () => {\n    const previousGrid = programState.grid;\n    const gridScore = computeScore(previousGrid, programState.count);\n    let better = false;\n    if (previousGrids.length === 0) {\n      better = true;\n    } else {\n      for (const previousGrid of previousGrids) {\n        if (previousGrid.score < gridScore) {\n          better = true;\n        }\n      }\n    }\n    if (better) {\n      console.log(JSON.stringify(program, null, 2));\n      if (previousGrids.length === previousGridsColors.length) {\n        previousGrids.splice(previousGrids.length - 1);\n      }\n      previousGrids.unshift({ grid: previousGrid, score: gridScore });\n      console.log(\"High scores\");\n      console.group();\n      const hexdigits = \"123456789ABCDEF\".split(\"\");\n      for (let gidx = 0; gidx < previousGrids.length; ++gidx) {\n        console.log(`${hexdigits[gidx]} - ${previousGrids[gidx].score}`);\n      }\n      console.groupEnd();\n    }\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE);\n    for (let gridIdx = previousGrids.length - 1; gridIdx >= 0; --gridIdx) {\n      const grid = previousGrids[gridIdx].grid;\n      const color = previousGridsColors[gridIdx];\n      context.fillStyle = color;\n      for (let x = 0; x < WIDTH; ++x) {\n        for (let y = 0; y < HEIGHT; ++y) {\n          if (grid[x][y]) {\n            context.fillRect(\n              x * CELL_SIZE,\n              y * CELL_SIZE,\n              CELL_SIZE,\n              CELL_SIZE\n            );\n          }\n        }\n      }\n    }\n    program = initializeProgram();\n    programState = initializeProgramState();\n    currentActionChoice = 0;\n  };\n  componentDidMount() {\n    const canvas = document.querySelector(\"#canvas\");\n    context = canvas.getContext(\"2d\");\n  }\n  render() {\n    const { intervalHandle } = this.state;\n    return (\n      <div className=\"App\">\n        <p>\n          This is 2D Black and White Turing Machine simulator on a non-toroidal\n          grid\n        </p>\n        <p>\n          It randomly generates 2D Turing programs by choosing a random action\n          among the possible actions every time the machine does not know what\n          to do.\n        </p>\n        <p>Max number of instructions: {INSTRUCTIONS}</p>\n        <p>Max computation horizon: {MAX_INSTRUCTION_COUNT}</p>\n        <p>\n          Score: number of cells written on the grid, and speed at which these\n          cells were written in the fractional part\n        </p>\n        <p>\n          The last best computation shadows are displayed in shades of gray.\n        </p>\n        <p>\n          If you find a 2D Turing machine that grows in the center and gradually\n          fills the space, without going to the infinite left, right, top or\n          bottom, that would be a good one.\n        </p>\n        <p>Some info is dumped in the developer console</p>\n        <div>\n          <canvas\n            id=\"canvas\"\n            width={WIDTH * CELL_SIZE}\n            height={HEIGHT * CELL_SIZE}\n          />\n        </div>\n        <div>\n          <button disabled={!!intervalHandle} onClick={this.start}>\n            Start\n          </button>\n          <button disabled={!intervalHandle} onClick={() => this.stop()}>\n            Stop\n          </button>\n          <button disabled={!!intervalHandle} onClick={this.nextProgram}>\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}