{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["directions","initializeProgram","instructions","Array","from","length","WHITE","undefined","BLACK","getDimensions","gridSize","width","height","initializeProgramState","numberOfOuterWalls","grid","color","pristine","widx","x","y","instruction","count","actionChoices","currentActionChoice","initializePossibleActions","possibleActions","direction","push","program","programState","previousGrids","previousGridsColors","split","map","d","INSTRUCTIONS_EXHAUSTED","App","props","start","state","instructionsSteps","cellSize","context","getContext","fillStyle","fillRect","setState","intervalHandle","setInterval","steps","stop","nextFn","pauseHandle","clearInterval","clearTimeout","nsteps","pauseDuration","changedCells","stopped","instructionsExhausted","i","stepResult","step","cell","k","colorToWrite","setTimeout","pauseHande","nextProgram","generateRandomActions","maxInstructionCount","currentColor","action","random","actionIndex","Math","floor","maxxed","console","log","splice","createAction","nextX","nextY","nextInstruction","previousGrid","gridScore","score","computeScore","better","JSON","stringify","unshift","sort","g1","g2","group","hexdigits","gidx","groupEnd","gridIdx","document","querySelector","this","running","className","htmlFor","name","type","value","disabled","onChange","e","Number","target","checked","onClick","id","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4c2f437.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst directions = [\n  [-1, 0], // right\n  [0, 1], // down\n  [1, 0], // left\n  [0, -1], // up\n];\n\nconst WHITE = 0;\nconst BLACK = 1;\n\nconst RIGHT = 0;\nconst DOWN = 1;\nconst LEFT = 2;\nconst UP = 3;\n\nconst initializeProgram = (instructions) =>\n  Array.from({ length: instructions }, () => ({\n    WHITE: undefined,\n    BLACK: undefined,\n  }));\n\nconst getDimensions = (gridSize) => ({\n  width: gridSize * 2 + 1,\n  height: gridSize * 2 + 1,\n});\n\nconst initializeProgramState = (gridSize, numberOfOuterWalls) => {\n  const { width, height } = getDimensions(gridSize);\n  const grid = Array.from({ length: width }, () =>\n    Array.from({ length: height }, () => ({ color: WHITE, pristine: true }))\n  );\n  for (let widx = 0; widx < numberOfOuterWalls; ++widx) {\n    // north and south\n    for (let x = 2 * widx; x < width - 2 * widx; ++x) {\n      grid[x][2 * widx].color = BLACK;\n      grid[x][height - 1 - 2 * widx].color = BLACK;\n    }\n    // east and west\n    for (let y = 2 * widx; y < height - 2 * widx; ++y) {\n      grid[2 * widx][y].color = BLACK;\n      grid[width - 1 - 2 * widx][y].color = BLACK;\n    }\n  }\n  return {\n    instruction: 0,\n    count: 0,\n    x: gridSize + 1,\n    y: gridSize + 1,\n    grid,\n  };\n};\n\nlet actionChoices = [];\nlet currentActionChoice = null;\n\nconst initializePossibleActions = (instructions) => {\n  const possibleActions = [];\n  for (const direction of [RIGHT, DOWN, LEFT, UP]) {\n    for (const color of [BLACK, WHITE]) {\n      for (let instruction = 0; instruction < instructions; ++instruction) {\n        possibleActions.push({ direction, color, instruction });\n      }\n    }\n  }\n  actionChoices = [];\n  currentActionChoice = null;\n  return possibleActions;\n};\n\nlet program = null;\nlet programState = null;\nlet possibleActions = null;\n\nconst previousGrids = [];\nconst previousGridsColors = \"123456789ABCDEF\"\n  .split(\"\")\n  .map((d) => `#${d}${d}${d}${d}${d}${d}`);\n\nconst INSTRUCTIONS_EXHAUSTED = \"INSTRUCTIONS_EXHAUSTED\";\n\nconst createAction = (random) => {\n  if (random) {\n    const actionIndex = Math.floor(Math.random() * possibleActions.length);\n    const action = possibleActions[actionIndex];\n    return action;\n  }\n  // TODO: handle boundary when everything is maxxed\n  if (currentActionChoice === null) {\n    currentActionChoice = 0;\n  }\n  if (actionChoices[currentActionChoice] === undefined) {\n    actionChoices.push(0);\n  } else {\n    let maxxed = true;\n    console.log(actionChoices);\n    if (currentActionChoice < actionChoices.length - 1) {\n      for (let i = currentActionChoice + 1; i < actionChoices.length; ++i) {\n        if (actionChoices[i] !== possibleActions.length - 1) {\n          maxxed = false;\n        }\n      }\n    } else {\n      if (actionChoices[currentActionChoice] !== possibleActions.length - 1) {\n        maxxed = false;\n      }\n    }\n    if (maxxed) {\n      if (currentActionChoice === 0) {\n        return INSTRUCTIONS_EXHAUSTED;\n      } else {\n        ++actionChoices[currentActionChoice];\n        actionChoices.splice(currentActionChoice + 1);\n      }\n    } else {\n      ++actionChoices[currentActionChoice];\n    }\n  }\n  const action = possibleActions[actionChoices[currentActionChoice]];\n  ++currentActionChoice;\n  return action;\n};\n\nconst computeScore = (grid, count, width, height, maxInstructionCount) => {\n  let score = 0;\n  for (let x = 0; x < width; ++x) {\n    for (let y = 0; y < height; ++y) {\n      if (!grid[x][y].pristine) {\n        ++score;\n      }\n    }\n  }\n  score += 1 - count / maxInstructionCount;\n  return score;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      intervalHandle: null,\n      pauseHandle: null,\n      instructions: 10,\n      instructionsSteps: 1,\n      maxInstructionCount: 10_000,\n      pauseDuration: 1,\n      gridSize: 150,\n      cellSize: 2,\n      generateRandomActions: true,\n      numberOfOuterWalls: 15,\n      context: null,\n    };\n  }\n  start = () => {\n    const {\n      gridSize,\n      instructions,\n      instructionsSteps,\n      numberOfOuterWalls,\n      cellSize,\n    } = this.state;\n\n    const { width, height } = getDimensions(gridSize);\n    program = initializeProgram(instructions);\n    programState = initializeProgramState(gridSize, numberOfOuterWalls);\n    possibleActions = initializePossibleActions(instructions);\n    // draw initial grid\n\n    const context = this.getContext();\n    context.fillStyle = \"black\";\n    for (let x = 0; x < width; ++x) {\n      for (let y = 0; y < height; ++y) {\n        if (programState.grid[x][y].color === BLACK) {\n          context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n        }\n      }\n    }\n    // start interval\n    this.setState({\n      context,\n      intervalHandle: setInterval(() => this.steps(instructionsSteps), 1),\n    });\n  };\n  stop = (nextFn) => {\n    const { intervalHandle, pauseHandle } = this.state;\n    if (intervalHandle) {\n      clearInterval(intervalHandle);\n      this.setState({ intervalHandle: null }, nextFn);\n    } else if (pauseHandle) {\n      clearTimeout(pauseHandle);\n      this.setState({ pauseHandle: null });\n    }\n  };\n  steps = (nsteps) => {\n    const { cellSize, pauseDuration, context } = this.state;\n    let changedCells = {};\n    let stopped = false;\n    let instructionsExhausted = false;\n    for (let i = 0; i < nsteps; ++i) {\n      const stepResult = this.step();\n      if (stepResult.cell) {\n        changedCells[`${stepResult.cell.x}-${stepResult.cell.y}`] =\n          stepResult.cell;\n      }\n      if (stepResult.stopped) {\n        stopped = true;\n        instructionsExhausted = stepResult.instructionsExhausted;\n        break;\n      }\n    }\n    for (const k in changedCells) {\n      const x = changedCells[k].x;\n      const y = changedCells[k].y;\n      const colorToWrite = changedCells[k].colorToWrite;\n      context.fillStyle = colorToWrite === BLACK ? \"black\" : \"white\";\n      context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n    }\n    if (stopped) {\n      this.stop(() => {\n        this.setState({\n          pauseHandle: setTimeout(() => {\n            this.setState({ pauseHande: null }, () => {\n              this.nextProgram(instructionsExhausted);\n              this.start();\n            });\n          }, pauseDuration),\n        });\n      });\n    }\n  };\n  step = () => {\n    const { generateRandomActions, gridSize, maxInstructionCount } = this.state;\n    const { instruction, x, y, grid } = programState;\n    const { width, height } = getDimensions(gridSize);\n    debugger;\n    let currentColor = grid[x][y].color;\n    let action = program[instruction][currentColor];\n    if (action === undefined) {\n      action = createAction(generateRandomActions);\n      program[instruction][currentColor] = action;\n    }\n    if (action === INSTRUCTIONS_EXHAUSTED) {\n      return { stopped: true, cell: null, instructionsExhausted: true };\n    }\n    const nextX = x + directions[action.direction][0];\n    const nextY = y + directions[action.direction][1];\n    if (\n      nextX < 0 ||\n      nextX >= width ||\n      nextY < 0 ||\n      nextY >= height ||\n      programState.count > maxInstructionCount\n    ) {\n      return { stopped: true, cell: null, instructionsExhausted: false };\n    }\n    const nextInstruction = action.instruction;\n    const colorToWrite = action.color;\n    grid[x][y].color = colorToWrite;\n    grid[x][y].pristine = false;\n    programState.x = nextX;\n    programState.y = nextY;\n    programState.instruction = nextInstruction;\n    ++programState.count;\n    return {\n      cell: { x, y, colorToWrite },\n      stopped: false,\n      instructionsExhausted: false,\n    };\n  };\n  nextProgram = (instructionsExhausted) => {\n    const {\n      gridSize,\n      cellSize,\n      instructions,\n      maxInstructionCount,\n      numberOfOuterWalls,\n      context,\n    } = this.state;\n    const { width, height } = getDimensions(gridSize);\n    const previousGrid = programState.grid;\n    const gridScore = computeScore(\n      previousGrid,\n      programState.count,\n      width,\n      height,\n      maxInstructionCount\n    );\n    let better = false;\n    if (previousGrids.length === 0) {\n      better = true;\n    } else {\n      for (const previousGrid of previousGrids) {\n        if (previousGrid.score < gridScore) {\n          better = true;\n        }\n      }\n    }\n    if (better) {\n      console.log(JSON.stringify(program, null, 2));\n      previousGrids.unshift({ grid: previousGrid, score: gridScore });\n      previousGrids.sort((g1, g2) => {\n        if (g1.score === g2.score) {\n          return 0;\n        } else {\n          return g1.score < g2.score ? 1 : -1;\n        }\n      });\n      if (previousGrids.length > previousGridsColors.length) {\n        previousGrids.splice(previousGrids.length - 1);\n      }\n      console.log(\"High scores\");\n      console.group();\n      const hexdigits = \"123456789ABCDEF\".split(\"\");\n      for (let gidx = 0; gidx < previousGrids.length; ++gidx) {\n        console.log(`${hexdigits[gidx]} - ${previousGrids[gidx].score}`);\n      }\n      console.groupEnd();\n    }\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, width * cellSize, height * cellSize);\n    for (let gridIdx = previousGrids.length - 1; gridIdx >= 0; --gridIdx) {\n      const grid = previousGrids[gridIdx].grid;\n      const color = previousGridsColors[gridIdx];\n      context.fillStyle = color;\n      for (let x = 0; x < width; ++x) {\n        for (let y = 0; y < height; ++y) {\n          if (!grid[x][y].pristine) {\n            context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n          }\n        }\n      }\n    }\n    if (instructionsExhausted) {\n      console.log(\n        \"Switching to program with \" + (instructions + 1) + \" instructions\"\n      );\n      this.setState({ instructions: instructions + 1 }, () => {\n        const { instructions, gridSize, numberOfOuterWalls } = this.state;\n        possibleActions = initializePossibleActions(instructions);\n        program = initializeProgram(instructions);\n        programState = initializeProgramState(gridSize, numberOfOuterWalls);\n        currentActionChoice = 0;\n      });\n    } else {\n      program = initializeProgram(instructions);\n      programState = initializeProgramState(gridSize, numberOfOuterWalls);\n      currentActionChoice = 0;\n    }\n  };\n  getContext() {\n    const canvas = document.querySelector(\"#canvas\");\n    return canvas.getContext(\"2d\");\n  }\n  render() {\n    const {\n      intervalHandle,\n      pauseHandle,\n      instructions,\n      instructionsSteps,\n      maxInstructionCount,\n      pauseDuration,\n      gridSize,\n      cellSize,\n      generateRandomActions,\n      numberOfOuterWalls,\n    } = this.state;\n    const running = intervalHandle !== null || pauseHandle !== null;\n    const { width, height } = getDimensions(gridSize);\n    return (\n      <div className=\"App\">\n        <div>\n          <label htmlFor=\"instructions\">Number of instructions</label>\n          <input\n            name=\"instructions\"\n            type=\"number\"\n            value={instructions}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ instructions: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"maxInstructionCount\">Max instruction count</label>\n          <input\n            name=\"maxInstructionCount\"\n            type=\"number\"\n            value={maxInstructionCount}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ maxInstructionCount: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"instructionsSteps\">Instructions per step</label>\n          <input\n            name=\"instructionsSteps\"\n            type=\"number\"\n            value={instructionsSteps}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ instructionsSteps: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"pauseDuration\">Pause between runs</label>\n          <input\n            name=\"pauseDuration\"\n            type=\"number\"\n            value={pauseDuration}\n            disabled={running}\n            onChange={(e) => this.setState({ pauseDuration: Number(e.target.value) })}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"gridSize\">Grid size</label>\n          <input\n            name=\"gridSize\"\n            type=\"number\"\n            value={gridSize}\n            disabled={running}\n            onChange={(e) => this.setState({ gridSize: Number(e.target.value) })}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"cellSize\">Cell size</label>\n          <input\n            name=\"cellSize\"\n            type=\"number\"\n            value={cellSize}\n            disabled={running}\n            onChange={(e) => this.setState({ cellSize: Number(e.target.value) })}\n          />\n        </div>\n        <div>\n          <input\n            type=\"checkbox\"\n            name=\"generateRandomActions\"\n            checked={generateRandomActions}\n            onChange={(e) =>\n              this.setState({ generateRandomActions: e.target.checked })\n            }\n          />\n          <label htmlFor=\"generateRandomActions\">Generate random actions</label>\n        </div>\n        <div>\n          <label htmlFor=\"numberOfOuterWalls\">Number of outer walls</label>\n          <input\n            name=\"numberOfOuterWalls\"\n            type=\"number\"\n            value={numberOfOuterWalls}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ numberOfOuterWalls: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <button disabled={running} onClick={this.start}>\n            Start\n          </button>\n          <button disabled={!running} onClick={() => this.stop()}>\n            Stop\n          </button>\n          <button disabled={running} onClick={this.nextProgram}>\n            Next\n          </button>\n        </div>\n        <div>\n          <canvas\n            id=\"canvas\"\n            width={width * cellSize}\n            height={height * cellSize}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}