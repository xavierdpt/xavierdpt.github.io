{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["directions","initializeProgram","instructions","Array","from","length","WHITE","undefined","BLACK","getDimensions","gridSize","width","height","initializeProgramState","numberOfOuterWalls","grid","color","pristine","widx","x","y","instruction","count","actionChoices","currentActionChoice","initializePossibleActions","possibleActions","direction","push","colorLetters","directionLetters","program","programState","previousGrids","previousGridsColors","split","map","d","INSTRUCTIONS_EXHAUSTED","App","props","start","state","cellSize","increaseSpeed","instructionsSteps","context","getContext","fillStyle","fillRect","setState","intervalHandle","setInterval","currentSpeed","steps","stop","nextFn","pauseHandle","clearInterval","clearTimeout","nsteps","pauseDuration","changedCells","stopped","instructionsExhausted","i","stepResult","step","cell","k","colorToWrite","setTimeout","pauseHande","nextProgram","generateRandomActions","maxInstructionCount","currentColor","action","random","actionIndex","Math","floor","maxxed","splice","createAction","nextX","nextY","nextInstruction","historyLength","console","log","JSON","stringify","previousGrid","gridScore","score","computeScore","better","str","sep","programToString","unshift","sort","g1","g2","min","group","hexdigits","gidx","groupEnd","gridIdx","skipToNext","bestNotGood","pop","document","querySelector","this","running","className","htmlFor","name","type","value","disabled","onChange","e","Number","target","checked","max","onClick","id","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gRAGMA,EAAa,CACjB,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAWDC,EAAoB,SAACC,GAAD,OACxBC,MAAMC,KAAK,CAAEC,OAAQH,IAAgB,iBAAO,CAC1CI,WAAOC,EACPC,WAAOD,OAGLE,EAAgB,SAACC,GAAD,MAAe,CACnCC,MAAkB,EAAXD,EAAe,EACtBE,OAAmB,EAAXF,EAAe,IAGnBG,EAAyB,SAACH,EAAUI,GAKxC,IAJA,MAA0BL,EAAcC,GAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTG,EAAOZ,MAAMC,KAAK,CAAEC,OAAQM,IAAS,kBACzCR,MAAMC,KAAK,CAAEC,OAAQO,IAAU,iBAAO,CAAEI,MAtB9B,EAsB4CC,UAAU,SAEzDC,EAAO,EAAGA,EAAOJ,IAAsBI,EAAM,CAEpD,IAAK,IAAIC,EAAI,EAAID,EAAMC,EAAIR,EAAQ,EAAIO,IAAQC,EAC7CJ,EAAKI,GAAG,EAAID,GAAMF,MA1BV,EA2BRD,EAAKI,GAAGP,EAAS,EAAI,EAAIM,GAAMF,MA3BvB,EA8BV,IAAK,IAAII,EAAI,EAAIF,EAAME,EAAIR,EAAS,EAAIM,IAAQE,EAC9CL,EAAK,EAAIG,GAAME,GAAGJ,MA/BV,EAgCRD,EAAKJ,EAAQ,EAAI,EAAIO,GAAME,GAAGJ,MAhCtB,EAmCZ,MAAO,CACLK,YAAa,EACbC,MAAO,EACPH,EAAGT,EAAW,EACdU,EAAGV,EAAW,EACdK,SAIAQ,EAAgB,GAChBC,EAAsB,EAEpBC,EAA4B,SAACvB,GAEjC,IADA,IAAMwB,EAAkB,GACxB,MAAwB,CA/CZ,EACD,EACA,EACF,GA4CT,eACE,IADG,IAAMC,EAAS,KAClB,MAAoB,CAlDV,EADA,GAmDV,eACE,IADG,IAAMX,EAAK,KACLK,EAAc,EAAGA,EAAcnB,IAAgBmB,EACtDK,EAAgBE,KAAK,CAAED,YAAWX,QAAOK,gBAI/C,OAAOK,GAGHG,EAAe,CAAC,IAAK,KACrBC,EAAmB,CAAC,eAAM,eAAM,eAAM,gBA4BxCC,EAAU,KACVC,EAAe,KACfN,EAAkB,KAEhBO,EAAgB,GAChBC,EAAsB,kBACzBC,MAAM,IACNC,KAAI,SAACC,GAAD,iBAAWA,GAAX,OAAeA,GAAf,OAAmBA,GAAnB,OAAuBA,GAAvB,OAA2BA,GAA3B,OAA+BA,MAEhCC,EAAyB,yBAyehBC,E,kDAjbb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,MAAQ,WACN,MAOI,EAAKC,MANPhC,EADF,EACEA,SACAR,EAFF,EAEEA,aACAY,EAHF,EAGEA,mBACA6B,EAJF,EAIEA,SACAC,EALF,EAKEA,cACAC,EANF,EAMEA,kBAGF,EAA0BpC,EAAcC,GAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACfmB,EAAU9B,EAAkBC,GAC5B8B,EAAenB,EAAuBH,EAAUI,GAChDY,EAAkBD,EAA0BvB,GAC5C,IAAM4C,EAAU,EAAKC,aACrBD,EAAQE,UAAY,WACpB,IAAK,IAAI7B,EAAI,EAAGA,EAAIR,IAASQ,EAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,IAAUQ,EA7LtB,IA8LFY,EAAajB,KAAKI,GAAGC,GAAGJ,OAC1B8B,EAAQG,SAAS9B,EAAIwB,EAAUvB,EAAIuB,EAAUA,EAAUA,GAK7D,EAAKO,SAAS,CACZJ,UACAK,eAAgBC,aAAY,WAC1B,IAAQC,EAAiB,EAAKX,MAAtBW,aACR,EAAKH,SACH,CACEG,aACmB,OAAjBA,EACIR,EACAD,EACAS,EAAe,EACfA,IAER,WACE,IAAQA,EAAiB,EAAKX,MAAtBW,aACR,EAAKC,MAAMD,QAGd,MA7DY,EAgEnBE,KAAO,SAACC,GACN,MAAwC,EAAKd,MAArCS,EAAR,EAAQA,eAAgBM,EAAxB,EAAwBA,YACxBC,cAAcP,GACdQ,aAAaF,GACb,EAAKP,SAAS,CAAEC,eAAgB,KAAMM,YAAa,MAAQD,IApE1C,EAsEnBF,MAAQ,SAACM,GAKP,IAJA,MAA6C,EAAKlB,MAA1CC,EAAR,EAAQA,SAAUkB,EAAlB,EAAkBA,cAAef,EAAjC,EAAiCA,QAC7BgB,EAAe,GACfC,GAAU,EACVC,GAAwB,EACnBC,EAAI,EAAGA,EAAIL,IAAUK,EAAG,CAC/B,IAAMC,EAAa,EAAKC,OAKxB,GAJID,EAAWE,OACbN,EAAa,GAAD,OAAII,EAAWE,KAAKjD,EAApB,YAAyB+C,EAAWE,KAAKhD,IACnD8C,EAAWE,MAEXF,EAAWH,QAAS,CACtBA,GAAU,EACVC,EAAwBE,EAAWF,sBACnC,OAGJ,IAAK,IAAMK,KAAKP,EAAc,CAC5B,IAAM3C,EAAI2C,EAAaO,GAAGlD,EACpBC,EAAI0C,EAAaO,GAAGjD,EACpBkD,EAAeR,EAAaO,GAAGC,aACrCxB,EAAQE,UApPA,IAoPYsB,EAAyB,QAAU,QACvDxB,EAAQG,SAAS9B,EAAIwB,EAAUvB,EAAIuB,EAAUA,EAAUA,GAErDoB,GACF,EAAKR,MAAK,WACR,EAAKL,SAAS,CACZO,YAAac,YAAW,WACtB,EAAKrB,SAAS,CAAEsB,WAAY,OAAQ,WAClC,EAAKC,YAAYT,GACjB,EAAKvB,aAENoB,SAtGQ,EA2GnBM,KAAO,WACL,MAAiE,EAAKzB,MAA9DgC,EAAR,EAAQA,sBAAuBhE,EAA/B,EAA+BA,SAAUiE,EAAzC,EAAyCA,oBACzC,EAAoC3C,EAA5BX,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,EAAGC,EAAxB,EAAwBA,EAAGL,EAA3B,EAA2BA,KAC3B,EAA0BN,EAAcC,GAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACXgE,EAAe7D,EAAKI,GAAGC,GAAGJ,MAC1B6D,EAAS9C,EAAQV,GAAauD,GAKlC,QAJerE,IAAXsE,IACFA,EAxKe,SAACC,GACpB,GAAIA,EAAQ,CACV,IAAMC,EAAcC,KAAKC,MAAMD,KAAKF,SAAWpD,EAAgBrB,QAE/D,OADeqB,EAAgBqD,GAGjC,QAA2CxE,IAAvCgB,EAAcC,GAAoC,CACpDD,EAAcC,GAAuB,EACrC,IAAMqD,EAASnD,EAAgBH,EAAcC,IAE7C,QADEA,EACKqD,EAIP,IADA,IAAIK,GAAS,EACJjB,EAAIzC,EAAsB,EAAGyC,EAAI1C,EAAclB,SAAU4D,EAC5D1C,EAAc0C,KAAOvC,EAAgBrB,OAAS,IAChD6E,GAAS,GAGb,GAAIA,EAAQ,CACV,GAC0B,IAAxB1D,GACAD,EAAcC,KAAyBE,EAAgBrB,OAAS,EAEhE,OAAOiC,IAELf,EAAcC,GAChBD,EAAc4D,OAAO3D,EAAsB,GAC3C,IAAMqD,EAASnD,EAAgBH,EAAcC,IAE7C,QADEA,EACKqD,EAGT,IAAMA,EAASnD,EAAgBH,EAAcC,IAE7C,QADEA,EACKqD,EAqIEO,CAAaV,GACtB3C,EAAQV,GAAauD,GAAgBC,GAEnCA,IAAWvC,EACb,MAAO,CAAEyB,SAAS,EAAMK,KAAM,KAAMJ,uBAAuB,GAE7D,IAAMqB,EAAQlE,EAAInB,EAAW6E,EAAOlD,WAAW,GACzC2D,EAAQlE,EAAIpB,EAAW6E,EAAOlD,WAAW,GAC/C,GACE0D,EAAQ,GACRA,GAAS1E,GACT2E,EAAQ,GACRA,GAAS1E,GACToB,EAAaV,MAAQqD,EAErB,MAAO,CAAEZ,SAAS,EAAMK,KAAM,KAAMJ,uBAAuB,GAE7D,IAAMuB,EAAkBV,EAAOxD,YACzBiD,EAAeO,EAAO7D,MAO5B,OANAD,EAAKI,GAAGC,GAAGJ,MAAQsD,EACnBvD,EAAKI,GAAGC,GAAGH,UAAW,EACtBe,EAAab,EAAIkE,EACjBrD,EAAaZ,EAAIkE,EACjBtD,EAAaX,YAAckE,IACzBvD,EAAaV,MACR,CACL8C,KAAM,CAAEjD,IAAGC,IAAGkD,gBACdP,SAAS,EACTC,uBAAuB,IA9IR,EAiJnBS,YAAc,SAACT,GACb,MASI,EAAKtB,MARPhC,EADF,EACEA,SACAiC,EAFF,EAEEA,SACAzC,EAHF,EAGEA,aACAyE,EAJF,EAIEA,oBACA7D,EALF,EAKEA,mBACAgC,EANF,EAMEA,QACAD,EAPF,EAOEA,kBACA2C,EARF,EAQEA,cAEFC,QAAQC,IAAIC,KAAKC,UAAUrE,IAC3B,MAA0Bd,EAAcC,GAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTiF,EAAe7D,EAAajB,KAC5B+E,EA7KW,SAAC/E,EAAMO,EAAOX,EAAOC,EAAQ+D,GAEhD,IADA,IAAIoB,EAAQ,EACH5E,EAAI,EAAGA,EAAIR,IAASQ,EAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,IAAUQ,EACvBL,EAAKI,GAAGC,GAAGH,YACZ8E,EAKR,OADAA,GAAS,EAAIzE,EAAQqD,GAoKDqB,CAChBH,EACA7D,EAAaV,MACbX,EACAC,EACA+D,GAEEsB,GAAS,EACb,GAA6B,IAAzBhE,EAAc5B,OAChB4F,GAAS,MACJ,CAAC,IAAD,gBACsBhE,GADtB,IACL,2BAA0C,SACvB8D,MAAQD,IACvBG,GAAS,IAHR,+BAOP,GAAIA,EAAQ,CACVR,QAAQC,IA5QU,SAAC3D,GAGvB,IAFA,IAAImE,EAAM,GACNC,GAAM,EACDlC,EAAI,EAAGA,EAAIlC,EAAQ1B,SAAU4D,EACpC,cAAoB,CAnEV,EACA,GAkEV,eAAoC,CAA/B,IAAMjD,EAAK,KAId,GAHImF,IACFD,GAAO,KAELnE,EAAQkC,GAAI,CACd,IAAMY,EAAS9C,EAAQkC,GAAGjD,GACtB6D,GACFqB,GAAOjC,EACPiC,GAAOrE,EAAab,GACpBkF,GAAOpE,EAAiB+C,EAAOlD,WAC/BuE,GAAOrE,EAAagD,EAAO7D,OAC3BkF,GAAOrB,EAAOxD,YACd8E,GAAM,GAENA,GAAM,GAKd,OAAOD,EAqPSE,CAAgBrE,IAC5BE,EAAcoE,QAAQ,CAAEtF,KAAM8E,EAAcE,MAAOD,IACnD7D,EAAcqE,MAAK,SAACC,EAAIC,GACtB,OAAID,EAAGR,QAAUS,EAAGT,MACX,EAEAQ,EAAGR,MAAQS,EAAGT,MAAQ,GAAK,KAKpC9D,EAAc5B,OACd2E,KAAKyB,IAAIjB,EAAetD,EAAoB7B,SAE5C4B,EAAckD,OAAOlD,EAAc5B,OAAS,GAE9CoF,QAAQC,IAAI,eACZD,QAAQiB,QAER,IADA,IAAMC,EAAY,kBAAkBxE,MAAM,IACjCyE,EAAO,EAAGA,EAAO3E,EAAc5B,SAAUuG,EAChDnB,QAAQC,IAAR,UAAeiB,EAAUC,GAAzB,cAAoC3E,EAAc2E,GAAMb,QAE1DN,QAAQoB,WAEV/D,EAAQE,UAAY,UACpBF,EAAQG,SAAS,EAAG,EAAGtC,EAAQgC,EAAU/B,EAAS+B,GAClD,IAAK,IAAImE,EAAU7E,EAAc5B,OAAS,EAAGyG,GAAW,IAAKA,EAAS,CACpE,IAAM/F,EAAOkB,EAAc6E,GAAS/F,KAC9BC,EAAQkB,EAAoB4E,GAElChE,EAAQE,UAAYhC,EACS,IAAzBiB,EAAc5B,SAChByC,EAAQE,UAAY,OAEtB,IAAK,IAAI7B,EAAI,EAAGA,EAAIR,IAASQ,EAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,IAAUQ,EACC,IAAzBa,EAAc5B,OA9Wd,IA+WEU,EAAKI,GAAGC,GAAGJ,OACb8B,EAAQG,SAAS9B,EAAIwB,EAAUvB,EAAIuB,EAAUA,EAAUA,GAGpD5B,EAAKI,GAAGC,GAAGH,UACd6B,EAAQG,SAAS9B,EAAIwB,EAAUvB,EAAIuB,EAAUA,EAAUA,GAM7DqB,GACFyB,QAAQC,IACN,8BAAgCxF,EAAe,GAAK,iBAEtD,EAAKgD,SACH,CAAEhD,aAAcA,EAAe,EAAGmD,aAAcR,IAChD,WACE,MAAuD,EAAKH,MAApDxC,EAAR,EAAQA,aAAcQ,EAAtB,EAAsBA,SAAUI,EAAhC,EAAgCA,mBAChCY,EAAkBD,EAA0BvB,GAC5C6B,EAAU9B,EAAkBC,GAC5B8B,EAAenB,EAAuBH,EAAUI,GAChDS,EAAc4D,OAAO3D,GACrBA,EAAsB,MAI1B,EAAK0B,SAAS,CAAEG,aAAcR,IAAqB,WACjDd,EAAU9B,EAAkBC,GAC5B8B,EAAenB,EAAuBH,EAAUI,GAChDS,EAAc4D,OAAO3D,GACrBA,EAAsB,MArPT,EA6PnBuF,WAAa,WACX,IAAQpC,EAAwB,EAAKjC,MAA7BiC,oBACR3C,EAAaV,OAASqD,GA/PL,EAiQnBqC,YAAc,WACR/E,EAAc5B,OAAS,GACzB4B,EAAcgF,OAjQhB,EAAKvE,MAAQ,CACXS,eAAgB,KAChBM,YAAa,KACbvD,aAAc,GACd2C,kBAAmB,EACnB8B,oBAAqB,IACrBd,cAAe,EACfnD,SAAU,IACViC,SAAU,EACV+B,uBAAuB,EACvB5D,mBAAoB,EACpBgC,QAAS,KACTF,eAAe,EACfS,aAAc,KACdmC,cAAe,GAhBA,E,8CAyPnB,WAEE,OADe0B,SAASC,cAAc,WACxBpE,WAAW,Q,oBAW3B,WAAU,IAAD,SACP,EAcIqE,KAAK1E,MAbPS,EADF,EACEA,eACAM,EAFF,EAEEA,YACAvD,EAHF,EAGEA,aACA2C,EAJF,EAIEA,kBACA8B,EALF,EAKEA,oBACAd,EANF,EAMEA,cACAnD,EAPF,EAOEA,SACAiC,EARF,EAQEA,SACA+B,EATF,EASEA,sBACA5D,EAVF,EAUEA,mBACA8B,EAXF,EAWEA,cACAS,EAZF,EAYEA,aACAmC,EAbF,EAaEA,cAEI6B,EAA6B,OAAnBlE,GAA2C,OAAhBM,EAC3C,EAA0BhD,EAAcC,GAAhCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,OACE,sBAAK0G,UAAU,MAAf,UACE,gCACE,uBAAOC,QAAQ,eAAf,oCACA,uBACEd,IAAK,EACLe,KAAK,eACLC,KAAK,SACLC,MAAOxH,EACPyH,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEhD,aAAc4H,OAAOD,EAAEE,OAAOL,eAIpD,gCACE,uBAAOH,QAAQ,sBAAf,mCACA,uBACEd,IAAK,EACLe,KAAK,sBACLC,KAAK,SACLC,MAAO/C,EACPgD,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEyB,oBAAqBmD,OAAOD,EAAEE,OAAOL,eAI3D,gCACE,uBAAOH,QAAQ,oBAAf,mCACA,uBACEd,IAAK,EACLe,KAAK,oBACLC,KAAK,SACLC,MAAO7E,EACP8E,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEL,kBAAmBiF,OAAOD,EAAEE,OAAOL,eAIzD,gCACE,uBACED,KAAK,WACLD,KAAK,gBACLQ,QAASpF,EACTgF,SAAU,SAACC,GAAD,OAAO,EAAK3E,SAAS,CAAEN,cAAeiF,EAAEE,OAAOC,aAE3D,uBAAOT,QAAQ,gBAAf,+BAEF,gCACE,uBAAOA,QAAQ,gBAAf,gCACA,uBACEd,IAAK,EACLe,KAAK,gBACLC,KAAK,SACLC,MAAO7D,EACP8D,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEW,cAAeiE,OAAOD,EAAEE,OAAOL,eAIrD,gCACE,uBAAOH,QAAQ,WAAf,uBACA,uBACEd,IAAK,EACLe,KAAK,WACLC,KAAK,SACLC,MAAOhH,EACPiH,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAExC,SAAUoH,OAAOD,EAAEE,OAAOL,eAIhD,gCACE,uBAAOH,QAAQ,WAAf,uBACA,uBACEd,IAAK,EACLe,KAAK,WACLC,KAAK,SACLC,MAAO/E,EACPgF,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEP,SAAUmF,OAAOD,EAAEE,OAAOL,eAIhD,gCACE,uBACED,KAAK,WACLD,KAAK,wBACLQ,QAAStD,EACTkD,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEwB,sBAAuBmD,EAAEE,OAAOC,aAGpD,uBAAOT,QAAQ,wBAAf,wCAEF,gCACE,uBAAOA,QAAQ,qBAAf,mCACA,uBACEd,IAAK,EACLe,KAAK,qBACLC,KAAK,SACLC,MAAO5G,EACP6G,SAAUN,EACVO,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEpC,mBAAoBgH,OAAOD,EAAEE,OAAOL,eAI1D,gCACE,uBAAOH,QAAQ,gBAAf,4BACA,uBACEC,KAAK,gBACLC,KAAK,SACLC,MAAOlC,EACPmC,SAAUN,EACVY,IAAK/F,EAAoB7B,OACzBoG,IAAK,EACLmB,SAAU,SAACC,GAAD,OACR,EAAK3E,SAAS,CAAEsC,cAAesC,OAAOD,EAAEE,OAAOL,eAIrD,gCACE,wBAAQC,SAAUN,EAASa,QAASd,KAAK3E,MAAzC,mBAGA,wBAAQkF,UAAWN,EAASa,QAAS,kBAAM,EAAK3E,QAAhD,kBAGA,wBAAQoE,UAAWN,EAASa,QAAS,kBAAM,EAAKnB,cAAhD,0BAGA,wBAAQmB,QAAS,kBAAM,EAAKlB,eAA5B,iCAEF,kDAAqB3D,KACrB,4DAAqBrB,SAArB,aAAqB,EAAcV,SACnC,8BACE,wBACE6G,GAAG,SACHxH,MAAOA,EAAQgC,EACf/B,OAAQA,EAAS+B,a,GA1aXyF,IAAMC,WCvJTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,M","file":"static/js/main.68bc377b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst directions = [\n  [-1, 0], // right\n  [0, 1], // down\n  [1, 0], // left\n  [0, -1], // up\n];\n\nconst WHITE = 0;\nconst BLACK = 1;\n\nconst RIGHT = 0;\nconst DOWN = 1;\nconst LEFT = 2;\nconst UP = 3;\n\nconst initializeProgram = (instructions) =>\n  Array.from({ length: instructions }, () => ({\n    WHITE: undefined,\n    BLACK: undefined,\n  }));\n\nconst getDimensions = (gridSize) => ({\n  width: gridSize * 2 + 1,\n  height: gridSize * 2 + 1,\n});\n\nconst initializeProgramState = (gridSize, numberOfOuterWalls) => {\n  const { width, height } = getDimensions(gridSize);\n  const grid = Array.from({ length: width }, () =>\n    Array.from({ length: height }, () => ({ color: WHITE, pristine: true }))\n  );\n  for (let widx = 0; widx < numberOfOuterWalls; ++widx) {\n    // north and south\n    for (let x = 2 * widx; x < width - 2 * widx; ++x) {\n      grid[x][2 * widx].color = BLACK;\n      grid[x][height - 1 - 2 * widx].color = BLACK;\n    }\n    // east and west\n    for (let y = 2 * widx; y < height - 2 * widx; ++y) {\n      grid[2 * widx][y].color = BLACK;\n      grid[width - 1 - 2 * widx][y].color = BLACK;\n    }\n  }\n  return {\n    instruction: 0,\n    count: 0,\n    x: gridSize + 1,\n    y: gridSize + 1,\n    grid,\n  };\n};\n\nlet actionChoices = [];\nlet currentActionChoice = 0;\n\nconst initializePossibleActions = (instructions) => {\n  const possibleActions = [];\n  for (const direction of [RIGHT, DOWN, LEFT, UP]) {\n    for (const color of [BLACK, WHITE]) {\n      for (let instruction = 0; instruction < instructions; ++instruction) {\n        possibleActions.push({ direction, color, instruction });\n      }\n    }\n  }\n  return possibleActions;\n};\n\nconst colorLetters = [\"W\", \"B\"];\nconst directionLetters = [\"🠞\", \"🠟\", \"🠜\", \"🠝\"];\n\nconst programToString = (program) => {\n  let str = \"\";\n  let sep = false;\n  for (let i = 0; i < program.length; ++i) {\n    for (const color of [WHITE, BLACK]) {\n      if (sep) {\n        str += \",\";\n      }\n      if (program[i]) {\n        const action = program[i][color];\n        if (action) {\n          str += i;\n          str += colorLetters[color];\n          str += directionLetters[action.direction];\n          str += colorLetters[action.color];\n          str += action.instruction;\n          sep = true;\n        } else {\n          sep = false;\n        }\n      }\n    }\n  }\n  return str;\n};\n\nlet program = null;\nlet programState = null;\nlet possibleActions = null;\n\nconst previousGrids = [];\nconst previousGridsColors = \"123456789ABCDEF\"\n  .split(\"\")\n  .map((d) => `#${d}${d}${d}${d}${d}${d}`);\n\nconst INSTRUCTIONS_EXHAUSTED = \"INSTRUCTIONS_EXHAUSTED\";\n\nconst createAction = (random) => {\n  if (random) {\n    const actionIndex = Math.floor(Math.random() * possibleActions.length);\n    const action = possibleActions[actionIndex];\n    return action;\n  }\n  if (actionChoices[currentActionChoice] === undefined) {\n    actionChoices[currentActionChoice] = 0;\n    const action = possibleActions[actionChoices[currentActionChoice]];\n    ++currentActionChoice;\n    return action;\n  } else {\n    // if all next actions are maxxed, increase this one and remove the remaining actions\n    let maxxed = true;\n    for (let i = currentActionChoice + 1; i < actionChoices.length; ++i) {\n      if (actionChoices[i] !== possibleActions.length - 1) {\n        maxxed = false;\n      }\n    }\n    if (maxxed) {\n      if (\n        currentActionChoice === 0 &&\n        actionChoices[currentActionChoice] === possibleActions.length - 1\n      ) {\n        return INSTRUCTIONS_EXHAUSTED;\n      } else {\n        ++actionChoices[currentActionChoice];\n        actionChoices.splice(currentActionChoice + 1);\n        const action = possibleActions[actionChoices[currentActionChoice]];\n        ++currentActionChoice;\n        return action;\n      }\n    } else {\n      const action = possibleActions[actionChoices[currentActionChoice]];\n      ++currentActionChoice;\n      return action;\n    }\n  }\n};\n\nconst computeScore = (grid, count, width, height, maxInstructionCount) => {\n  let score = 0;\n  for (let x = 0; x < width; ++x) {\n    for (let y = 0; y < height; ++y) {\n      if (!grid[x][y].pristine) {\n        ++score;\n      }\n    }\n  }\n  score += 1 - count / maxInstructionCount;\n  return score;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      intervalHandle: null,\n      pauseHandle: null,\n      instructions: 10,\n      instructionsSteps: 1,\n      maxInstructionCount: 1_000_000,\n      pauseDuration: 1,\n      gridSize: 150,\n      cellSize: 2,\n      generateRandomActions: false,\n      numberOfOuterWalls: 1,\n      context: null,\n      increaseSpeed: true,\n      currentSpeed: null,\n      historyLength: 1,\n    };\n  }\n  start = () => {\n    const {\n      gridSize,\n      instructions,\n      numberOfOuterWalls,\n      cellSize,\n      increaseSpeed,\n      instructionsSteps,\n    } = this.state;\n\n    const { width, height } = getDimensions(gridSize);\n    program = initializeProgram(instructions);\n    programState = initializeProgramState(gridSize, numberOfOuterWalls);\n    possibleActions = initializePossibleActions(instructions);\n    const context = this.getContext();\n    context.fillStyle = \"darkgray\";\n    for (let x = 0; x < width; ++x) {\n      for (let y = 0; y < height; ++y) {\n        if (programState.grid[x][y].color === BLACK) {\n          context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n        }\n      }\n    }\n\n    this.setState({\n      context,\n      intervalHandle: setInterval(() => {\n        const { currentSpeed } = this.state;\n        this.setState(\n          {\n            currentSpeed:\n              currentSpeed === null\n                ? instructionsSteps\n                : increaseSpeed\n                ? currentSpeed + 1\n                : currentSpeed,\n          },\n          () => {\n            const { currentSpeed } = this.state;\n            this.steps(currentSpeed);\n          }\n        );\n      }, 1),\n    });\n  };\n  stop = (nextFn) => {\n    const { intervalHandle, pauseHandle } = this.state;\n    clearInterval(intervalHandle);\n    clearTimeout(pauseHandle);\n    this.setState({ intervalHandle: null, pauseHandle: null }, nextFn);\n  };\n  steps = (nsteps) => {\n    const { cellSize, pauseDuration, context } = this.state;\n    let changedCells = {};\n    let stopped = false;\n    let instructionsExhausted = false;\n    for (let i = 0; i < nsteps; ++i) {\n      const stepResult = this.step();\n      if (stepResult.cell) {\n        changedCells[`${stepResult.cell.x}-${stepResult.cell.y}`] =\n          stepResult.cell;\n      }\n      if (stepResult.stopped) {\n        stopped = true;\n        instructionsExhausted = stepResult.instructionsExhausted;\n        break;\n      }\n    }\n    for (const k in changedCells) {\n      const x = changedCells[k].x;\n      const y = changedCells[k].y;\n      const colorToWrite = changedCells[k].colorToWrite;\n      context.fillStyle = colorToWrite === BLACK ? \"black\" : \"white\";\n      context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n    }\n    if (stopped) {\n      this.stop(() => {\n        this.setState({\n          pauseHandle: setTimeout(() => {\n            this.setState({ pauseHande: null }, () => {\n              this.nextProgram(instructionsExhausted);\n              this.start();\n            });\n          }, pauseDuration),\n        });\n      });\n    }\n  };\n  step = () => {\n    const { generateRandomActions, gridSize, maxInstructionCount } = this.state;\n    const { instruction, x, y, grid } = programState;\n    const { width, height } = getDimensions(gridSize);\n    let currentColor = grid[x][y].color;\n    let action = program[instruction][currentColor];\n    if (action === undefined) {\n      action = createAction(generateRandomActions);\n      program[instruction][currentColor] = action;\n    }\n    if (action === INSTRUCTIONS_EXHAUSTED) {\n      return { stopped: true, cell: null, instructionsExhausted: true };\n    }\n    const nextX = x + directions[action.direction][0];\n    const nextY = y + directions[action.direction][1];\n    if (\n      nextX < 0 ||\n      nextX >= width ||\n      nextY < 0 ||\n      nextY >= height ||\n      programState.count > maxInstructionCount\n    ) {\n      return { stopped: true, cell: null, instructionsExhausted: false };\n    }\n    const nextInstruction = action.instruction;\n    const colorToWrite = action.color;\n    grid[x][y].color = colorToWrite;\n    grid[x][y].pristine = false;\n    programState.x = nextX;\n    programState.y = nextY;\n    programState.instruction = nextInstruction;\n    ++programState.count;\n    return {\n      cell: { x, y, colorToWrite },\n      stopped: false,\n      instructionsExhausted: false,\n    };\n  };\n  nextProgram = (instructionsExhausted) => {\n    const {\n      gridSize,\n      cellSize,\n      instructions,\n      maxInstructionCount,\n      numberOfOuterWalls,\n      context,\n      instructionsSteps,\n      historyLength,\n    } = this.state;\n    console.log(JSON.stringify(actionChoices));\n    const { width, height } = getDimensions(gridSize);\n    const previousGrid = programState.grid;\n    const gridScore = computeScore(\n      previousGrid,\n      programState.count,\n      width,\n      height,\n      maxInstructionCount\n    );\n    let better = false;\n    if (previousGrids.length === 0) {\n      better = true;\n    } else {\n      for (const previousGrid of previousGrids) {\n        if (previousGrid.score < gridScore) {\n          better = true;\n        }\n      }\n    }\n    if (better) {\n      console.log(programToString(program));\n      previousGrids.unshift({ grid: previousGrid, score: gridScore });\n      previousGrids.sort((g1, g2) => {\n        if (g1.score === g2.score) {\n          return 0;\n        } else {\n          return g1.score < g2.score ? 1 : -1;\n        }\n      });\n\n      if (\n        previousGrids.length >\n        Math.min(historyLength, previousGridsColors.length)\n      ) {\n        previousGrids.splice(previousGrids.length - 1);\n      }\n      console.log(\"High scores\");\n      console.group();\n      const hexdigits = \"123456789ABCDEF\".split(\"\");\n      for (let gidx = 0; gidx < previousGrids.length; ++gidx) {\n        console.log(`${hexdigits[gidx]} - ${previousGrids[gidx].score}`);\n      }\n      console.groupEnd();\n    }\n    context.fillStyle = \"#EEEEEE\";\n    context.fillRect(0, 0, width * cellSize, height * cellSize);\n    for (let gridIdx = previousGrids.length - 1; gridIdx >= 0; --gridIdx) {\n      const grid = previousGrids[gridIdx].grid;\n      const color = previousGridsColors[gridIdx];\n\n      context.fillStyle = color;\n      if (previousGrids.length === 1) {\n        context.fillStyle = \"red\";\n      }\n      for (let x = 0; x < width; ++x) {\n        for (let y = 0; y < height; ++y) {\n          if (previousGrids.length === 1) {\n            if (grid[x][y].color === BLACK) {\n              context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n            }\n          } else {\n            if (!grid[x][y].pristine) {\n              context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n            }\n          }\n        }\n      }\n    }\n    if (instructionsExhausted) {\n      console.log(\n        \"Switching to program with \" + (instructions + 1) + \" instructions\"\n      );\n      this.setState(\n        { instructions: instructions + 1, currentSpeed: instructionsSteps },\n        () => {\n          const { instructions, gridSize, numberOfOuterWalls } = this.state;\n          possibleActions = initializePossibleActions(instructions);\n          program = initializeProgram(instructions);\n          programState = initializeProgramState(gridSize, numberOfOuterWalls);\n          actionChoices.splice(currentActionChoice);\n          currentActionChoice = 0;\n        }\n      );\n    } else {\n      this.setState({ currentSpeed: instructionsSteps }, () => {\n        program = initializeProgram(instructions);\n        programState = initializeProgramState(gridSize, numberOfOuterWalls);\n        actionChoices.splice(currentActionChoice);\n        currentActionChoice = 0;\n      });\n    }\n  };\n  getContext() {\n    const canvas = document.querySelector(\"#canvas\");\n    return canvas.getContext(\"2d\");\n  }\n  skipToNext = () => {\n    const { maxInstructionCount } = this.state;\n    programState.count += maxInstructionCount;\n  };\n  bestNotGood = () => {\n    if (previousGrids.length > 0) {\n      previousGrids.pop();\n    }\n  };\n  render() {\n    const {\n      intervalHandle,\n      pauseHandle,\n      instructions,\n      instructionsSteps,\n      maxInstructionCount,\n      pauseDuration,\n      gridSize,\n      cellSize,\n      generateRandomActions,\n      numberOfOuterWalls,\n      increaseSpeed,\n      currentSpeed,\n      historyLength,\n    } = this.state;\n    const running = intervalHandle !== null || pauseHandle !== null;\n    const { width, height } = getDimensions(gridSize);\n    return (\n      <div className=\"App\">\n        <div>\n          <label htmlFor=\"instructions\">Number of instructions</label>\n          <input\n            min={1}\n            name=\"instructions\"\n            type=\"number\"\n            value={instructions}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ instructions: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"maxInstructionCount\">Max instruction count</label>\n          <input\n            min={1}\n            name=\"maxInstructionCount\"\n            type=\"number\"\n            value={maxInstructionCount}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ maxInstructionCount: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"instructionsSteps\">Instructions per step</label>\n          <input\n            min={1}\n            name=\"instructionsSteps\"\n            type=\"number\"\n            value={instructionsSteps}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ instructionsSteps: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <input\n            type=\"checkbox\"\n            name=\"increaseSpeed\"\n            checked={increaseSpeed}\n            onChange={(e) => this.setState({ increaseSpeed: e.target.checked })}\n          />\n          <label htmlFor=\"increaseSpeed\">Increase speed</label>\n        </div>\n        <div>\n          <label htmlFor=\"pauseDuration\">Pause between runs</label>\n          <input\n            min={1}\n            name=\"pauseDuration\"\n            type=\"number\"\n            value={pauseDuration}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ pauseDuration: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"gridSize\">Grid size</label>\n          <input\n            min={0}\n            name=\"gridSize\"\n            type=\"number\"\n            value={gridSize}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ gridSize: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"cellSize\">Cell size</label>\n          <input\n            min={0}\n            name=\"cellSize\"\n            type=\"number\"\n            value={cellSize}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ cellSize: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <input\n            type=\"checkbox\"\n            name=\"generateRandomActions\"\n            checked={generateRandomActions}\n            onChange={(e) =>\n              this.setState({ generateRandomActions: e.target.checked })\n            }\n          />\n          <label htmlFor=\"generateRandomActions\">Generate random actions</label>\n        </div>\n        <div>\n          <label htmlFor=\"numberOfOuterWalls\">Number of outer walls</label>\n          <input\n            min={0}\n            name=\"numberOfOuterWalls\"\n            type=\"number\"\n            value={numberOfOuterWalls}\n            disabled={running}\n            onChange={(e) =>\n              this.setState({ numberOfOuterWalls: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <label htmlFor=\"historyLength\">History length</label>\n          <input\n            name=\"historyLength\"\n            type=\"number\"\n            value={historyLength}\n            disabled={running}\n            max={previousGridsColors.length}\n            min={0}\n            onChange={(e) =>\n              this.setState({ historyLength: Number(e.target.value) })\n            }\n          />\n        </div>\n        <div>\n          <button disabled={running} onClick={this.start}>\n            Start\n          </button>\n          <button disabled={!running} onClick={() => this.stop()}>\n            Stop\n          </button>\n          <button disabled={!running} onClick={() => this.skipToNext()}>\n            Skip to next\n          </button>\n          <button onClick={() => this.bestNotGood()}>Best is not good</button>\n        </div>\n        <div>Current speed: {currentSpeed}</div>\n        <div>Current count: {programState?.count}</div>\n        <div>\n          <canvas\n            id=\"canvas\"\n            width={width * cellSize}\n            height={height * cellSize}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}