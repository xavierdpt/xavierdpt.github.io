{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WIDTH","HEIGHT","directions","program","WHITE","undefined","BLACK","context","intervalHandle","App","props","drawOnCanvas","state","instruction","x","y","grid","currentColor","action","direction","Math","floor","random","length","color","push","nextX","nextY","clearInterval","console","log","nextInstruction","colorToWrite","fillStyle","fillRect","JSON","stringify","setState","Array","from","canvas","document","querySelector","getContext","className","id","width","height","onClick","setInterval","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gRAGMA,EAAQ,IACRC,EAAS,IAETC,EAAa,CACjB,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,IAWDC,EAAU,CAAC,CAAEC,WAAOC,EAAWC,WAAOD,IACxCE,EAAU,KASVC,EAAiB,KAgENC,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,aAAe,WAAO,IAO6B,EAP9B,EACiB,EAAKC,MAAjCC,EADW,EACXA,YAAaC,EADF,EACEA,EAAGC,EADL,EACKA,EAAGC,EADR,EACQA,KACrBC,EAAeD,EAAKF,GAAGC,GACzBG,EAASf,EAAQU,GAAaI,QACnBZ,IAAXa,IACFA,EAxBG,CACLC,UAAWC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC3BT,YAAaO,KAAKC,MAAMD,KAAKE,UAAYnB,EAAQoB,OAAS,IAC1DC,MAAOJ,KAAKC,MAAsB,EAAhBD,KAAKE,WAsBrBnB,EAAQU,GAAaI,GAAgBC,OACDb,IAAhCF,EAAQe,EAAOL,cACjBV,EAAQsB,MAAR,mBAvCM,OAuCkBpB,GAAxB,cAtCM,OAsCsCA,GAA5C,KAGJ,IAAMqB,EAAQZ,EAAIZ,EAAWgB,EAAOC,WAAW,GACzCQ,EAAQZ,EAAIb,EAAWgB,EAAOC,WAAW,GAC/C,GAAIO,EAAQ,GAAKA,GAAS1B,GAAS2B,EAAQ,GAAKA,GAAS1B,EAGvD,OAFA2B,cAAcpB,QACdqB,QAAQC,IAAI,WAGd,IAAMC,EAAkBb,EAAOL,YACzBmB,EAAed,EAAOM,MAC5BjB,EAAQ0B,UAnDE,GAmDUD,EAAwB,QAAU,QACtDzB,EAAQ2B,SAASpB,EAAGC,EAAG,EAAG,GAC1BC,EAAKF,GAAGC,GAAKG,EAAOM,MACpBK,QAAQC,IAAIK,KAAKC,UAAUjC,IAC3B,EAAKkC,SAAS,CAAEvB,EAAGY,EAAOX,EAAGY,EAAOd,YAAakB,KAjCjD,EAAKnB,MAAQ,CACXC,YAAa,EACbC,EAAGM,KAAKC,MAAMrB,MAAa,EAC3Be,EAAGK,KAAKC,MAAMpB,MAAc,EAC5Be,KAAMsB,MAAMC,KAAK,CAAEhB,OAAQvB,IAAS,kBAClCsC,MAAMC,KAAK,CAAEhB,OAAQtB,IAAU,kBAAM,SAPxB,E,qDAqCnB,WACE,IAAMuC,EAASC,SAASC,cAAc,WACtCnC,EAAUiC,EAAOG,WAAW,Q,oBAE9B,WAAU,IAAD,OACP,OACE,sBAAKC,UAAU,MAAf,UACE,0CACA,8BACE,wBAAQC,GAAG,SAASC,MAAO9C,EAAO+C,OAAQ9C,MAE5C,8BACE,wBACE+C,QAAS,WACPxC,EAAiByC,YAAY,EAAKtC,aAAc,MAFpD,kC,GAlDQuC,IAAMC,WCpBTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.36c54a68.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst WIDTH = 151;\nconst HEIGHT = 151;\n\nconst directions = [\n  [-1, 0], // right\n  [0, 1], // down\n  [-1, 0], // left\n  [0, -1], // up\n];\n\nconst WHITE = 0;\nconst BLACK = 1;\n\nconst RIGHT = 0;\nconst DOWN = 1;\nconst LEFT = 2;\nconst UP = 3;\n\nconst program = [{ WHITE: undefined, BLACK: undefined }];\nlet context = null;\n\nconst createRandomAction = () => {\n  return {\n    direction: Math.floor(Math.random() * 4),\n    instruction: Math.floor(Math.random() * (program.length + 1)),\n    color: Math.floor(Math.random() * 2),\n  };\n};\nlet intervalHandle = null;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      instruction: 0,\n      x: Math.floor(WIDTH / 2) + 1,\n      y: Math.floor(HEIGHT / 2) + 1,\n      grid: Array.from({ length: WIDTH }, () =>\n        Array.from({ length: HEIGHT }, () => 0)\n      ),\n    };\n  }\n  drawOnCanvas = () => {\n    const { instruction, x, y, grid } = this.state;\n    const currentColor = grid[x][y];\n    let action = program[instruction][currentColor];\n    if (action === undefined) {\n      action = createRandomAction();\n      program[instruction][currentColor] = action;\n      if (program[action.instruction] === undefined) {\n        program.push({ [WHITE]: undefined, [BLACK]: undefined });\n      }\n    }\n    const nextX = x + directions[action.direction][0];\n    const nextY = y + directions[action.direction][1];\n    if (nextX < 0 || nextX >= WIDTH || nextY < 0 || nextY >= HEIGHT) {\n      clearInterval(intervalHandle);\n      console.log(\"Stopped\");\n      return;\n    }\n    const nextInstruction = action.instruction;\n    const colorToWrite = action.color;\n    context.fillStyle = colorToWrite == WHITE ? \"white\" : \"black\";\n    context.fillRect(x, y, 1, 1);\n    grid[x][y] = action.color;\n    console.log(JSON.stringify(program));\n    this.setState({ x: nextX, y: nextY, instruction: nextInstruction });\n  };\n  componentDidMount() {\n    const canvas = document.querySelector(\"#canvas\");\n    context = canvas.getContext(\"2d\");\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>Welcome</div>\n        <div>\n          <canvas id=\"canvas\" width={WIDTH} height={HEIGHT} />\n        </div>\n        <div>\n          <button\n            onClick={() => {\n              intervalHandle = setInterval(this.drawOnCanvas, 100);\n            }}\n          >\n            Draw canvas\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}